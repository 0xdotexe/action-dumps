name: StaticWeb

on:
  repository_dispatch:
    types: [deployment]
  workflow_dispatch:
    
jobs:
  build:
    name: Build Jekyll Website
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]
        
    steps:
      - name: Github Checkout
        uses: actions/checkout@v2.3.3
        with:
          ref: ${{ github.head_ref }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.0

      - name: Add env to Github
        run: |
          echo $GEM_HOME/bin >> $HOME/.bashrc
          source $HOME/.bashrc
          echo $PATH
        env:
          GEM_HOME: "$HOME/gems"
        shell: bash
        
      - name: Check Ruby is installed or not
        run: |
          ruby -v
          
      - name: install bundler
        run: |
          gem install jekyll bundler
          
      - name: bundle install
        run: |
          bundle install
        working-directory: ./rawBlog
        shell: bash
        
      - name: build
        run: |
          jekyll build && cd _site && jekyll build && mv _site ../../storage/buildBlog
        working-directory: ./rawBlog
        shell: bash
        
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install dependencies
        run: yarn install
        working-directory: ./storage
        
      - name: upload to ipfs
        run: |
          echo "::set-output name=uploaded_on_ipfs::$(yarn web3-storage-upload)\n"
        env:
          WEB3_STORAGE_TOKEN: ${{ IPFS_TOKEN }}
        working-directory: ./storage
        id: ipfs_push
        
      - name: Extract the output and store it in env
        run: |
          echo "CID=$(echo ${{ steps.ipfs_push.outputs.stdout }} | awk -F 'cid: ' '{print $2}'" >> $GITHUB_ENV
        shell: bash
        
      - name: check env
        run: echo ${{ env.CID }}
        shell: bash
    continue-on-error: true
